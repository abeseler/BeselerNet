@attribute [Route(Routes.ResetPassword)]
@attribute [AllowAnonymous]
@inject NavigationManager _navigation
@inject AuthStateProvider _authStateProvider
@inject HttpClient _http

<PageTitle>BSLR: Reset Password</PageTitle>

@if (PasswordResetToken is null)
{
    <div class="p-3">Check your email to reset your password.</div>
}
else
{
    <div class="mask d-flex align-items-center">
        <div class="container h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-12 col-md-9 col-lg-7 col-xl-6">
                    <div class="card" style="border-radius: 15px;">
                        <div class="card-body p-4">

                            <EditForm EditContext="_context" OnValidSubmit="Submit" FormName="ResetPassword">
                                <DataAnnotationsValidator />

                                <h2 class="text-uppercase text-center mb-5">Reset Password</h2>

                                <TimedAlert Message="@_errorMessage" ShowUntil="@_showUntil" />

                                <div class="form-outline mb-4">
                                    <label class="form-label" for="Input_Password">Password</label>
                                    <InputText tabindex="1" type="password" id="Input_Password" class="form-control form-control-lg" @ref="_firstInput" @bind-Value="_model.Password" />
                                    <ValidationMessage For="@(() => _model.Password)" />
                                </div>

                                <div class="form-outline mb-4">
                                    <label class="form-label" for="Input_ConfirmPassword">Repeat your password</label>
                                    <InputText tabindex="2" type="password" id="Input_ConfirmPassword" class="form-control form-control-lg" @bind-Value="_model.ConfirmPassword" />
                                    <ValidationMessage For="@(() => _model.ConfirmPassword)" />
                                </div>

                                @if (_isProcessing)
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center">
                                        <button tabindex="3" type="submit" class="btn btn-primary btn-lg">Login</button>
                                    </div>
                                }
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "token")] public string? PasswordResetToken { get; set; }
    [SupplyParameterFromForm] private FormModel _model { get; set; } = new();
    private EditContext? _context;
    private InputText? _firstInput;
    private string? _errorMessage;
    private DateTime? _showUntil;
    private bool _isProcessing;

    private class FormModel
    {
        [Required(ErrorMessage = "Password is required!")]
        [MinLength(8), MaxLength(50)]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Re-enter your password!"), Compare(nameof(Password), ErrorMessage = "Passwords to not match!")]
        public string? ConfirmPassword { get; set; }
    }

    protected override void OnInitialized() => _context = new(_model);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _firstInput?.Element is not null)
            await _firstInput.Element.Value.FocusAsync();
    }

    private async Task Submit()
    {
        _isProcessing = true;
        try
        {
            var request = new ResetPasswordRequest(PasswordResetToken ?? "", _model.Password!);
            _model.Password = null;
            _model.ConfirmPassword = null;

            var response = await _http.PostAsJsonAsync(Endpoints.Accounts.ResetPassword, request);
            if (response.IsSuccessStatusCode is false)
            {
                _errorMessage = "Failed to reset password!";
                _showUntil = DateTime.UtcNow.AddSeconds(5);
                return;
            }

            _navigation.NavigateTo(Routes.Login);
        }
        finally
        {
            _isProcessing = false;
        }
    }
}
